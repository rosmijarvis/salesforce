{
  "name": "salesforce-api",
  "version": "0.3.11",
  "description": "Module to invoke salesforce.com services",
  "author": {
    "name": "Kidozen",
    "email": "support@kidozen.com"
  },
  "contributors": [
    {
      "name": "Silvio Massari",
      "email": "silvio@kidozen.com"
    },
    {
      "name": "Christian Carnero",
      "email": "chris@kidozen.com"
    }
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kidozen/node-salesforce-api.git"
  },
  "keywords": [
    "kidozen",
    "connector",
    "salesforce"
  ],
  "license": "MIT",
  "dependencies": {
    "node-salesforce": "0.8.0",
    "mem-cache": "0.0.4",
    "node-uuid": "1.4.0",
    "request": "2.34.0",
    "jsonwebtoken": "0.2.0"
  },
  "devDependencies": {
    "mocha": "1.11.0",
    "assert": "0.4.9",
    "nock": "0.18.2"
  },
  "readme": "# SalesForce client for Nodejs\nThis node module provides a set of methods to interact against SalesForce's services.\nThe module was created as part of [KidoZen](http://www.kidozen.com) project, as a connector for its Enterprise API feature.\n\n## Installation\n\nUse npm to install the module:\n\n```\n> npm install salesforce-api\n```\n\n## API\n\nDue to the asynchrounous nature of Nodejs, this module uses callbacks in requests. All callbacks have 2 arguments: `err` and `data`.\n\n```\nfunction callback (err, data) {\n\t// err contains an Error class instance, if any\n\t// data contains the resulting data\n} \n``` \n\n\n### Authentication\n\n\n#### UserName and Password login\n\nThe module exports a Class and its constructor requires a configuration object with following properties\n\n* `username`: Required string. End-user’s username.\n* `password`: Required string. End-user’s password.\n\n```\nvar SalesForce = require(\"salesforce-api\");\nvar salesforce = new SalesForce();\nsalesforce.authenticate({\n        username: \"account@kidozen.com\",\n        password: \"secret\"\n    }, ...\n```\n\n#### Username and Password Login (OAuth2 Resource Owner Password Credential)\n\nWhen OAuth2 client information is given to ctor. authenticate(username, password) uses OAuth2 Resource Owner Password Credential flow to login to Salesforce.\n\n* `username`: Required string. End-user’s username.\n* `password`: Required string. End-user’s password.\n* `oauth2`: Required. OAuth2 information\n\n```\nvar SalesForce = require(\"salesforce-api\");\nvar salesforce = new SalesForce();\nsalesforce.authenticate({\n        username: \"account@kidozen.com\",\n        password: \"secret\",\n        oauth2 : {\n            clientId : '...',\n            clientSecret : '...',\n            redirectUri : 'https://login.salesforce.com/services/oauth2/token'\n        }\n    }, ...\n\n```\n\n\n#### Access Token\n\nAfter the authenticate API call, you can get Salesforce access token and its instance URL. Next time you can use them to establish connection.\n\n```\nvar OAUTH2SessionInfo = {\n      \tinstanceUrl : '<your Salesforce server URL (e.g. https://na1.salesforce.com) is here>',\n      \taccessToken : '<your Salesforce session ID is here>'\n   \t\t// you can find this values in the result of authenticate method\n    };\n\nvar query = {\n    credentials : OAUTH2SessionInfo,\n    SOSQL: \"SELECT Id from Account\"\n};\n\napi.Query(query, function(err, result) {\n\t...\n\t...\n\t...\n\n```\n\n\n### Methods\nAll public methods has the same signature, their have two arguments: `options` and `callback`.\n* `options` must be an object instance containig all parameters for the method.\n* `callback` must be a function.\n\n#### Describe(options, callback)\n\nThis method should be used to retrieve metadata for an object.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `objectClass`: Optional string.\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.Describe({ objectClass:\"Account\" }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### DescribeGlobal(options, callback)\n\nThis method returns all SObject information registered in Salesforce\n\n**Parameters:**\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.DescribeGlobal(function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### SOSQL Query(options, callback)\n\nUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `SOSQL`: Required string.\n* `callback`: A required function for callback.\n\n\n```\nsalesforce.Query({ SOSQL: \"SELECT Id, Name, BillingCity FROM Account\" }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n#### Json Query(options, callback)\n\nUse this method to execute a SOQL query that returns all the results in a single response, or if needed, returns part of the results and an identifier used to retrieve the remaining results.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Conditions`: Required string.\n\t* `Fields`: Required string.\n\t* `Options`: Required string.\n* `callback`: A required function for callback.\n\n\n```\nvar query = {\n                Entity: \"Account\",\n                Conditions : { \n                    Name : { $like : 'G%' }\n                },\n                Fields : {\n                    Id: 1,\n                    Name: 1,\n                    CreatedDate: 1 \n                },\n                Options : { \n                    Limit : 5,\n                    Skip: 10\n                }\n            };\nsalesforce.Query(query, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n\n#### Create(options, callback)\n\nThis method allows you to create a new record. You have to supply the required field values of the resource.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object instance\n* `callback`: A required function for callback.\n\nThe following example creates a new Account record:\n\n```\nvar newAccount = { Name: \"Foo account\" };\nsalesforce.Create({ Entity: \"Account\",  Details: newAccount }, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Update(options, callback)\n\nUse this method to update records. Provide the updated record information at the `data` property.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object. Updated record. It must have the `id` property with the object id to update\n* `callback`: A required function for callback.\n\nIn the following example, the Billing City within an Account is update.\n\n```\nvar options = {\n\tEntity: \"Account\",\n\tDetails : \n\t\t{\n\t\t\tid: \"CD656092\",\n\t\t\tBillingCity: \"San Francisco\" \n\t\t}\n\t}\n};\n\nsalesforce.Update(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Upsert(options, callback)\n\nWill upsert a record or records given in first argument. External ID field name must be specified in second argument.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required object. Updated record. It must have the `ExtId__c` property with the object id to update\n\t* `ExternalIdName` the field id name\n* `callback`: A required function for callback.\n\n```\nvar options = {\n\tEntity: \"UpsertTable__c\",\n\tDetails : \n\t\t{\n\t\t\tName : 'Record #1',\n  \t\t\tExtId__c : 'ID-0000001'\n  \t\t},\n\tExternalIdName : 'ExtId__c'\n\t}\n};\n\nsalesforce.Upsert(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n#### Delete(options, callback)\n\nUse this method to delete an existing record.\n\n**Parameters:**\n* `options`: A required object instance:\n\t* `Entity`: Required string.\n\t* `Details`: Required, string or array of strings with the ids to delete\n* `callback`: A required function for callback.\n\nIn the following example removes the record the ID 1234 from Account\n\n```\nvar options = {\n\tEntity: \"Account\",\n\tDetails: \"1234\"\n};\n\nsalesforce.Delete(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\nor\n\n```\nvar options = {\n\tEntity: \"Account\",\n\tDetails: [\"1234\",\"012\"]\n};\n\nsalesforce.Delete(options, function(err, result) {\n\tif (err) return console.error (err);\n\tconsole.log (result);\n});\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/kidozen/node-salesforce-api/issues"
  },
  "homepage": "https://github.com/kidozen/node-salesforce-api",
  "_id": "salesforce-api@0.3.11",
  "_shasum": "0f67713ffbed4b134e29167e9fc889d7da262ab8",
  "_from": "salesforce-api@",
  "_resolved": "https://registry.npmjs.org/salesforce-api/-/salesforce-api-0.3.11.tgz"
}
