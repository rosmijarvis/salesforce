{
  "name": "mem-cache",
  "version": "0.0.4",
  "description": "simple in memory key/value cache with autoclean by timeout",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/silviom/node-mem-cache.git"
  },
  "keywords": [
    "cache"
  ],
  "author": {
    "name": "Silvio Massari",
    "email": "silvio.massari@gmail.com"
  },
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.11.0",
    "assert": "0.4.9"
  },
  "readme": "# node-mem-cache\n\nA simple in-memory cache for node.js\n- Entries will be disposed on timeout\n- Emits an event on each dispose item by timeout\n\n## Installation\n\n    npm install mem-cache\n\n## Usage\n\n    var Cache = require('mem-cache');\n    var cache = new Cache();\n\n    cache.set('foo', 'bar');\n    console.log(cache.get('foo'))\n\n## API\n\n#### constructor = function(options)\n* 'options' argument is an optional object instance containing the configuration. \n*   - timeout.              Optional number. Specifies in milliseconds the default timeout for each entry. Default 60000 ms.\n*   - doesNotRenewTimeout   Optional boolean. Specifies if entries's timeout should be reseted after each query or update. Default false.\n*   - timeoutDisabled       Optional boolean. Enable/diable timeout feature. If timeout feature is desable, items will not expire. Default false.\n\n### Methods\n\n#### set = function(key, value, timeout)\n* Stores or updates a value.\n* - key     {string} Required. \n* - value   {any}    Required.\n* - timeout {number} Optional. Specifies in milliseconds the timeout for this entry.\n\n#### get = function(key)\n* Retreives a value for a given key, if there is no value for the given key a null value will be returned\n* - key     {string} Required.\n\n#### remove = function(key)\n* Deletes the value and its key from the cache\n\n#### clear = function()\n* Deletes cache's entries all keys\n\n### Properties\n\n#### keys \n*Returns an string array containing all items' keys. It will include keys of items that are expired but weren't been removed yet.\n\n#### length \n* Property that returns the current number of entries in the cache\n\n### Events\n\n#### expired \n* This event will be emitted for every cache entry that was removed because timed out",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/silviom/node-mem-cache/issues"
  },
  "homepage": "https://github.com/silviom/node-mem-cache",
  "_id": "mem-cache@0.0.4",
  "_shasum": "9942c006fa429390bd5fccc7b790c04f61e0e5bb",
  "_from": "mem-cache@0.0.4",
  "_resolved": "https://registry.npmjs.org/mem-cache/-/mem-cache-0.0.4.tgz"
}
